#!/usr/bin/env node

var semver = require('semver');
var https = require('https');
var exec = require('child_process').exec;

function request(method, host, path, cb) {
  var options = {
    'host': host,
    'method': method,
    'path': path
  };

  var req = https.request(options, function(res) {
    if (res.statusCode != 200) {
      return cb(new Error('Returned status code: ' + res.statusCode));
    }

    var body = '';

    res.on('data', function(d) {
      body += d;
    });

    res.on('end', function() {
      cb(null, body, res);
    });
  });

  req.end();
}


function getAvailableVersions(cb) {
  request(
    'GET', 'storage.googleapis.com', '/gcp-node-packages/node_versions',
    function(err, body) {
      if (err) {
        return cb(err);
      }
      return cb(null, body.trim().split('\n').sort().reverse());
    }
  );
}


function getSatisfyingVersion(requestedVersion, cb) {
  getAvailableVersions(function(err, versions) {
    if (err) {
      return cb(err);
    }
    var satisfied = versions.some(function(version) {
      if (semver.satisfies(version, requestedVersion)) {
        cb(null, version);
        return true;
      }
    });
    if (!satisfied) {
      return cb(new Error(
        'No Node.js version satisfying ' + requestedVersion + ' found.'));
    }
  });
}


function verifyBinaryExists(version, cb) {
  request(
    'HEAD',
    'storage.googleapis.com',
    '/gcp-node-packages/node-' + version + '-linux-x64.tar.gz',
    function(err) {
      if (err) {
        return cb(new Error(
          'Binary for Node.js version ' + version + ' is not available.'));
      }
      return cb();
    });
}


function downloadAndInstallVersion(version, cb) {
  var destPath = '/nodejs';
  var baseUrl = 'https://storage.googleapis.com/gae_node_packages';
  var cmd = '/opt/nodejs/verify_install_node ' + baseUrl +
    ' ' + version + ' ' + version + '-SHASUMS256.txt.asc ' + destPath +
    ' WARN_ON_ERROR';

  var proc = exec(cmd, { maxBuffer: 500*1024 }, function(error) {
    cb(error);
  });

  proc.stdout.on('data', function(data) {
    process.stdout.write(data);
  });

  proc.stderr.on('data', function(data) {
    process.stderr.write(data);
  });
}


function fail(err) {
  console.error('Node installation failed: ' + err.message);
  process.exit(1);
}


function main(requestedVersion) {
  // Does the current Node.js version already satisfy the requested version?
  // If so, we have nothing to do.
  if (semver.satisfies(process.version, requestedVersion)) {
    return;
  }

  // Otherwise, find which version satisfies and install it.
  getSatisfyingVersion(requestedVersion, function(err, version) {
    if (err) {
      return fail(err);
    }
    verifyBinaryExists(version, function(err) {
      if (err) {
        return fail(err);
      }
      downloadAndInstallVersion(version, function(err) {
        if (err) {
          return fail(err);
        }
        console.log('Installed Node.js ' + version);
      });
    });
  });
}

var spec = process.argv[2];
main(spec);
